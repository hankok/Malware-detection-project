import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;
import java.util.Vector;


public class Mtree {
	private MultiTreeNode root;

	public Mtree(String rootNodeId, String rootNodeName) {
		// parentID is null, because we are creating a root
		TreeNode node = new TreeNode(rootNodeId, "", rootNodeName);
		node.setRule("root");
		root = new MultiTreeNode(node);
	}

	/**
	 * Check if node exists in the tree
	 * 
	 */
	static int exists(List<Vector<TreeNode>> Trees, TreeNode node) {
		System.out.println("Exists?" + node.getNodeId());
		int index = 0;
		for(Vector<TreeNode> t : Trees)
		{
			for(TreeNode tn : t)
			{
				if(tn.getNodeId().equals(node.getNodeId()))
				{
					System.out.println("Exists - " + node.getNodeId());
					return index;
				}
			}
			index++;
		}
		return -1;
	}

	/**
	 * Add child node to multi tree.
	 * 
	 * @param MultiTreeNode
	 *            each of the node in the tree
	 * @param node
	 *            to be added to the tree
	 */
	public boolean addChild(MultiTreeNode MultiTreeNode, TreeNode node) {

		// if the node has a parent, which means the parent is possibly in this
		// tree,
		// (also could be in another tree in the forest)
		System.out.println("&&&Adding " + node.getNodeId());

		if (node.getParentId().equals(MultiTreeNode.getData().getNodeId())) {
			// if the node's parent is MultiTreeNode, add it to the child list
			MultiTreeNode.getChildList().add(new MultiTreeNode(node));
			System.out.println("&&&Added " + node.getNodeId());

			return true;
		}
		for (MultiTreeNode item : MultiTreeNode.getChildList()){
			if (addChild(item, node)){
				return true;
			}
		}
		
		return false;
	}

	/**
	 * Traverse the tree
	 * 
	 * @param MultiTreeNode
	 *            多叉树节点
	 * @return
	 */
	public Deque<MultiTreeNode> getAllNodes(MultiTreeNode multiTreeNode) {
		Deque<MultiTreeNode> unvisited = new ArrayDeque<MultiTreeNode>();
		unvisited.push(multiTreeNode); 
		
		Deque<MultiTreeNode> visited = new ArrayDeque<MultiTreeNode>();
		MultiTreeNode current;
		while (unvisited.size() != 0)
		{
			current = (unvisited.getFirst()); 

			if (current.getChildList() != null
					&& current.getChildList().size() > 0) {
				for (MultiTreeNode node : current.getChildList()) {
					unvisited.push(node);
				}
			}
			
			visited.push(current);
			System.out.println(current.getData().getNodeId());
			unvisited.pop();
		}
		return visited;
	}

	/**
	 * Traverse the tree
	 * 
	 * @param MultiTreeNode
	 *            多叉树节点
	 * @return
	 */
	public String iteratorTree(MultiTreeNode MultiTreeNode) {
		StringBuilder buffer = new StringBuilder();
		buffer.append("\n");

		if (MultiTreeNode != null) {
			buffer.append(MultiTreeNode.getData().getNodeName() + ":"
					+ MultiTreeNode.getData().getNodeId() + ":"
					+ MultiTreeNode.getData().getRule() + ",");

			for (MultiTreeNode index : MultiTreeNode.getChildList()) {
				buffer.append(index.getData().getNodeName() + ":"
						+ index.getData().getNodeId() + ":"
						+ index.getData().getRule() + ",");
				if (index.getChildList() != null
						&& index.getChildList().size() > 0) {
					buffer.append(iteratorTree(index));
				}
			}
		}

		buffer.append("\n");

		return buffer.toString();
	}

	public MultiTreeNode getRoot() {
		return root;
	}

	public void setRoot(MultiTreeNode root) {
		this.root = root;
	}

	public static void main(String[] args) {
		// A list to store all the trees in the forest
		List<Mtree> trees = new ArrayList<Mtree>();
		// A list to store all the nodes inserted into each tree
		List<Vector<TreeNode>> l = new ArrayList<Vector<TreeNode>>();

		// Accepting processed logs from monitors
		try {
			// Wrap the System.in inside BufferedReader
			// But do not close it in a finally block, as we
			// did no open System.in; enforcing the rule that
			// he who opens it, closes it; leave the closing to the OS.
			BufferedReader in = new BufferedReader(new InputStreamReader(
					System.in));
			String line;
			while ((line = in.readLine()) != null) {
				// process1:xxxx fx,px process2:xxxx/file2
				String params[] = line.split(" "); 
				String name = params[0].split(":")[0];
				String id = params[0].split(":")[1];
				String rule = params[1];

				String childId = "";
				String childName = "";

				if (rule.contains("p")) {
					// this is a process rule, means the param[2] is processname:id
					childName = params[2].split(":")[0];
					childId = params[2].split(":")[1];
				} else {
					// this is a file rule, means the param[2] is filename
					childName = params[2];
				}

				TreeNode child = new TreeNode(childId, id, childName);
				child.setRule(rule);
				TreeNode parent = new TreeNode(id, "", name);
				System.out.println("In while: " + id + childName);

				
				// If tree(s) already created
				int index_tree = 0;
				if (trees.size() > 0) {
					index_tree = exists(l, parent);
					System.out.println("index_tree: " + index_tree );
					if (index_tree != -1) {
						if (!trees.get(index_tree).addChild(trees.get(index_tree).getRoot(), child)) {
							System.out.println("ERROR:" +  childName + ":" + childId + " with parent "
									+id + ":" + name +
									" not Added to tree" + index_tree);
							return;
						}
						else 
						{
							l.get(index_tree).add(child);
						}
					} else {
						System.out.println("Not found node: " + id );
					}
			
				}

				// If no trees created or the node to be added is a new root 
				if (trees.size() == 0 || index_tree == -1) {
					// Create a new tree and store in the forest
					System.out.println("Create a new tree with root:" + id + " we have totally ? trees " + (trees.size()+1));
					Mtree tree = new Mtree(id, name);
					if (!tree.addChild(tree.getRoot(), child)) {
						System.out.println("ERROR: Not Added to"
								+ tree.getRoot().getData().getNodeId() + "-"
								+ childName + ":" + childId + "*****");
						return;
					}
					
					trees.add(tree);
					
					l.add(new Vector<TreeNode>());
					l.get(l.size()-1).add(parent);
					l.get(l.size()-1).add(child);
				}

			}
			// Null was received, so loop was aborted.
		} catch (Exception e) {
			System.out.println(e);
		}

		int i = 0;
		for (Mtree tree : trees) {
			System.out.println("-----------------Tree" + String.valueOf(i++)
					+ " with root:" + tree.getRoot().getData().getNodeName()
					+ ":" + tree.getRoot().getData().getNodeId());			
			System.out.println(tree.iteratorTree(tree.getRoot()));
		}

	}

}
